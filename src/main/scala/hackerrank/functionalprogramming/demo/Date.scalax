package hackerrank.functionalprogramming.demo

import hackerrank.demo.Month.Month

object Date {

  def handleLeadingZero(dayOrMonth: String): Int =
    ( if ( dayOrMonth.startsWith("0") )
        dayOrMonth.drop(1)
      else
        dayOrMonth
    ).toInt

  def parse(s: String): Option[Date] = try {
    val parts = s.split(" ").map(handleLeadingZero)
    parts match {
      case Array(day, month, year) =>
        Some(Date(day, Month.apply(month), year))
      case _ =>
        // TODO add error messaging for various cases
        None
    }
  } catch {
    case e: Exception =>
      // TODO make more informative
      None
  }

}

case class Date(day: Int, month: Month, year: Int) extends Ordered[Date] {

  def isAfter(d: Date): Boolean = compare(d) == 1

  def isBefore(d: Date): Boolean = compare(d) == -1

  def yyyyMMddStr: String = s"${year}${month.id}${day}"

  override def compare(that: Date): Int =
    yyyyMMddStr.toInt.compare(
        that.yyyyMMddStr.toInt
      )
}
